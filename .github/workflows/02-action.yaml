name: Auth0 Workflow
on: push
defaults:
  run:
    working-directory: 02-action-ci
jobs:
  configure-env:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Create env file
      run: |
        touch .env
        echo "export AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }}" >> .env
        echo "export AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }}" >> .env
        echo "export AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET }}" >> .env
        echo "export ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> .env
        echo "export ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> .env
        echo "export ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> .env
        echo "export ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> .env
    - uses: actions/upload-artifact@v3
      with:
        name: env-file
        path: |
          02-action-ci/.env
        if-no-files-found: error

  build-actions:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js latest
      uses: actions/setup-node@v3
    - run: |
        npm install
    - name: Unit Test Auth0 Actions
      run: |
        npm run test:actions
    - name: Execute build.ps1
      shell: pwsh
      run: ./build.ps1
    - uses: actions/upload-artifact@v3
      with:
        name: actions-out
        path: |
          02-action-ci/actions_out/**/*
        if-no-files-found: error

  plan-staging:
    runs-on: ubuntu-latest
    needs:
      - build-actions
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: actions-out
          path: 02-action-ci/actions_out
      - uses: actions/download-artifact@v3
        with:
          name: env-file
          path: 02-action-ci
      - uses: hashicorp/setup-terraform@v2
      - name: "Staging: terraform init"
        run: |
          source .env
          terraform init -input=false -backend-config=backends/staging.tf

      - name: "Staging: terraform plan"
        run: |
          source .env
          terraform plan -no-color -input=false -out=tfplan

      - uses: actions/upload-artifact@v3
        with:
          name: staging-terraform-plan
          path: |
            02-action-ci/tfplan
          if-no-files-found: error
  
  deploy-staging:
    runs-on: ubuntu-latest
    needs:
      - build-actions
      - plan-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: actions-out
          path: 02-action-ci/actions_out
      - uses: actions/download-artifact@v3
        with:
          name: staging-terraform-plan
          path: 02-action-ci
      - uses: actions/download-artifact@v3
        with:
          name: env-file
          path: 02-action-ci
      - uses: hashicorp/setup-terraform@v2
      - name: "Staging: terraform init"
        run: |
          source .env
          terraform init -input=false -backend-config=backends/staging.tf
      - name: "Staging: terraform apply"
        run: |
          source .env
          # terraform apply -input=false tfplan

  run-staging-integration-tests:
    runs-on: ubuntu-latest
    needs:
      - deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: env-file
          path: 02-action-ci
  
  deploy-prod:
    runs-on: ubuntu-latest
    needs: 
      - run-staging-integration-tests
      - configure-env
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: actions-out
          path: 02-action-ci/actions_out
      - uses: actions/download-artifact@v3
        with:
          name: env-file
          path: 02-action-ci
      - uses: hashicorp/setup-terraform@v2
      - name: "Prod: terraform init"
        run: |
          source .env
          terraform init -input=false -backend-config=backends/prod.tf

      - name: "Prod: terraform plan"
        run: |
          source .env
          terraform plan -no-color -input=false -out=tfplan

      - name: "Prod: terraform apply"
        run: |
          source .env
          # terraform apply -input=false tfplan